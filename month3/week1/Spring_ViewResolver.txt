Spring View-Resolver

It provides a mapping between view names and actual views. The view interface addresses the preparation of the request and hands the request over to one of the view technologies.

What is the use of view resolver in Spring MVC?
Overview. All MVC frameworks provide a way of working with views. Spring does that via the view resolvers, which enable you to render models in the browser without tying the implementation to a specific view technology. The ViewResolver maps view names to actual views.

-In SpringMVC, ViewResolver is an interface.

There are different types of View Resolvers?

1)AbstractCachingViewResolver
2)XmlViewResolver
3)ResourceBundleViewResolver
4)UrlBasedViewResolver
5)InternalResourceViewResolver
6)VelocityViewResolver/FreeMarkerViewResolver
7)ContentNegotiatingViewResolver

1)AbstractCachingViewResolver : Abstract view resolver that caches views. Often views need preparation before they can be used; extending this view resolver provides caching.


2)XmlViewResolver : Implementation of ViewResolver that accepts a configuration file written in XML with the same DTD as Springâ€™s XML bean factories. The default configuration file is /WEB-INF/views.xml.


3)ResourceBundleViewResolver : Implementation of ViewResolver that uses bean definitions in a ResourceBundle, specified by the bundle base name. Typically you define the bundle in a properties file, located in the classpath. The default file name is views.properties.


4)UrlBasedViewResolver : Simple implementation of the ViewResolver interface that effects the direct resolution of logical view names to URLs, without an explicit mapping definition. This is appropriate if your logical names match the names of your view resources in a straightforward manner, without the need for arbitrary mappings.


5)InternalResourceViewResolver : Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (in effect, Servlets and JSPs) and subclasses such as JstlView and TilesView. You can specify the view class for all views generated by this resolver by using setViewClass(..).


6)VelocityViewResolver/FreeMarkerViewResolver : Convenient subclass of UrlBasedViewResolver that supports VelocityView (in effect, Velocity templates) or FreeMarkerView ,respectively, and custom subclasses of them.


7)ContentNegotiatingViewResolver : Implementation of the ViewResolver interface that resolves a view based on the request file name or Accept header.

InternalResourceViewResolver

-In InternalResourceViewResolver we will be using 2 properties prefix and suffix in beans xml file.

prefix consist of the path
suffix consist of the type of file.

Ex:
<bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver">
   <property name = "prefix" value = "/WEB-INF/jsp/"/>
   <property name = "suffix" value = ".jsp"/>
</bean>

XmlViewResolver

-The XmlViewResolver is used to resolve the view names using view beans defined in xml file

-We will be mentioning an xml file in <servlet-name>-servlet.xml which consist of views xml file.

Ex:

<bean class = "org.springframework.web.servlet.view.XmlViewResolver">
   <property name = "location">
      <value>/WEB-INF/views.xml</value>
   </property>
</bean>

<bean id = "hello"
   class = "org.springframework.web.servlet.view.JstlView">
   <property name = "url" value = "/WEB-INF/jsp/hello.jsp" />
</bean>

ResourceBundleViewResolver

-The ResourceBundleViewResolver is used to resolve the view names using view beans defined in the properties file.

-We will be defining a properties file and we will save that properties in bean xml file.

Ex:

<bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver">
   <property name = "basename" value = "views" />
</bean>

hello.(class) = org.springframework.web.servlet.view.JstlView
hello.url = /WEB-INF/jsp/hello.jsp

MulitResolverMapping

-We can have multiple views in one file. We need to set the order for that file. 

-In case you want to use a Multiple View Resolver in a Spring MVC application then priority order can be set using the order property

-We can have more than one type of viewresolver in this.

Ex:

TestWeb-servlet.xml
<bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver">
   <property name = "basename" value = "views" />
   <property name = "order" value = "0" />
</bean>
<bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver">
   <property name = "prefix" value = "/WEB-INF/jsp/" />
   <property name = "suffix" value = ".jsp" />
   <property name = "order" value = "1" />
</bean>

hello.(class) = org.springframework.web.servlet.view.JstlView
hello.url = /WEB-INF/jsp/hello.jsp

In java based configuration also we can do viewresolver. Only the language syntax might change. The functionality is same.