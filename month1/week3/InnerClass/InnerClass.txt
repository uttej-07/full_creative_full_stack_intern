InnerClass
-Java Inner class or nested class is a class which is declared inside a class.
-There will be two classes then the outer class and the inner class.
-The inner class can access its members and outer class members including private data members and methods.

Advantages of Inner Class
1)It can access its members and outer class members
2)To develop more readable and maintable code because it logicall group classes and interfaces in one place.
3)Code optimization.

-Inner class implements Encapsulation.

Need of Java Inner Class

-Sometimes users need to program a class in such a way so that no other class can access it. Therefore, it would be better if you include it within other classes.

-If all the class objects are a part of the outer object then it is easier to nest that class inside the outer class. That way all the outer class can access all the objects of the inner class.

Types of Nested Class

.Non-static nested class
 1)Member Inner Class
 2)Anonymous Inner Class
 3)Local Inner Class

.Static nested class
.Nested Interface

1)Java Member Inner Class
-A class that is declared inside another class is know as inner class. It can be declared with access modifiers like public, default, private and protected.

-When we want to instantiate the Inner class the syntax is

Outer.Inner obj = Outer.new Inner();

We need to create it by first instantiating outer then we need to write inner.

We even need to instantiate outer class first after that inner class.

Whenever we write code for Inner Class internally there will be a code generated by the compiler.

Example:

//Java Member Inner Class

package InnerClassPractice;

public class InnerClassExample1 {

	private int data = 30;
	class Inner{
		void msg() {
			System.out.println("data is " + data);
		}
	}
	
	public static void main(String[] args) {
		InnerClassExample1 obj = new InnerClassExample1();
		InnerClassExample1.Inner in = obj.new Inner();
		in.msg();
	}
}


Output:

data is 30

2)Anonymous Inner Class

-A class that has no name is known as anonymous inner class in Java.
-It is mainly used to override a method of class or interface.
-Java Anonymous inner class can be created in 2 ways:
1)Class(abstract or concrete)
2)Interface

Example:

//Anonymous Inner Class
package InnerClassPractice;

abstract class Person{
	abstract void walk();
}

interface Eatable{
	void eat();
}
public class InnerClassExample2 {

	public static void main(String[] args) {
		Person  p = new Person() {
		void walk() {
			System.out.println("A person can walk");
		}
	};
	    Eatable e = new Eatable() {
	    	public void eat() {
	    	System.out.println("Tasty food");	
	    	}
	    };
	    
		p.walk();
		e.eat();
}
}


Output:

A person can walk
Tasty food


Internal working off given code

-In the above example we have one abstract and interface. Initially we have create a class and the name is decided by compiler which extends the person class and provides the implementation of the interface and abstract methods.

-An object of the Anonymous class is created that is referred to by 'p,' a reference variable of Person type.

Java Local Inner Class
-A class which is created inside methodd is called local inner class. Local Inner class are the classes which are defined inside a block.
-Few times this can be inside the block can be for loop, or an if clause.
Local inner class access modiifiers can be final or abstract.
-If you want to invoke the methods of the local inner class, you must instantiate this class inside the method
-Local Inner Class  belong to the block they are defined within.
Example:

//Java Local Inner Class
package InnerClassPractice;

public class InnerClassExample3 {

	private int data = 10;
	void display() {
		class Local{
			int value = 50;
			void msg() {
				System.out.println(data);
				System.out.println(value);
			}
		}
		Local l = new Local();
		l.msg();
	}
	public static void main(String[] args) {
		InnerClassExample3 obj = new InnerClassExample3();
		obj.display();
	}
}

Output:

10
50

Java Static Nested Class
-Static class aren't like inner class.
-A static class which is deined inside a class, is called a static nested class in Java.
-A static class can't access non-static methods and data members.
-It can access static data members of the outer class, including private.
-The static nested class cannot access non-static (instance) data members or methods.

Example:

package InnerClassPractice;

public class InnerClassExample4 {

	static int data = 30;
	static  class Inner{
		void msg() {
			System.out.println("data is "+data);
		}
	}
	public static void main(String[] args) {
		InnerClassExample4.Inner obj = new InnerClassExample4.Inner();
		obj.msg();
	}
}

Output:

data is 30

Example:

package InnerClassPractice;

public class InnerClassExample5 {

	static int data = 10;
	static class Inner{
		static void msg() {
			System.out.println("data is "+ data);
		}
	}
	public static void main(String[] args) {
		InnerClassExample5.Inner.msg();
	}
}


Output:

data is 10

When we are using a static method then we can directly access it. We no need to create the instance of the static nested class.

Java Nested Interface
-An interface which is declared inside a interface is known Nested Interface.
-The nested interface must be referred to by the outer interface or class. 
-It can't be accessed directly.
-The nested interface must be public if it is declared inside the interface, but it can have any access modifier if declared within the class.
-Nested interfaces are declared static

Example:

package InnerClassPractice;

interface Showable{
	void show();
	interface Message{
		void msg();
	}
}

public class InnerClassExample6 implements Showable,Showable.Message{
	
	public void msg() {
		System.out.println("We have implemented the Interface which is inside an Interface ");
	}
	
	public void show() {
		System.out.println("Implemented the Inteface");
	}
	
	public static void main(String[] args) {
		Showable msg1 = new InnerClassExample6();
		Showable.Message msg = new InnerClassExample6();
		
		msg.msg();
	    msg1.show();
	}

}


Output:

We have implemented the Interface which is inside an Interface 
Implemented the Inteface

Example:

package InnerClassPractice;

class InterfacePractice{
	interface message{
		void msg();
	}
}
public class InnerClassExample7 implements InterfacePractice.message{
	
	public void msg() {
		System.out.println("Hello nested Interface");
	}
	
	public static void main(String[] args) {
		InterfacePractice.message obj = new InnerClassExample7();
		obj.msg();
	}

}


Output:

Hello nested Interface
