                        HashSet and TreeSet
-It implements the Set Interface, backed by a hash table which is actually a HashMap instance.
-HashSet uses HashMap internally because all the values which are added by HashTable are added as Key as HashMap.
-No duplicates are allowed.
-HashSet stores the elements by using a mechanism called Hashing.
-HashSet class is non synchronized.
-The initial default capacity of HashSet is 16, and the load factor is 0.75 means, whenever our has set if filled by 75%, the elements are moved to a new hashtable of double size of the original hash table.

Loadfactor = Number of stored elements in the table/Size of the hashtable
 
Constructors in HashSet
1)Hashset()-creates a hashset with default capacity
2)Hashset(int capacity)-Creates a hashset with the capacity mentioned. The capacity grows as values are added.
3)HashSet(int capacity, float loadFactor)-Creates a hashset with the capacity and load factor mentioned.
4)HashSet(Collection <?extends E>c)-Used to initialize hashset by using the elements of the collection c.

HashSet uses HashTable and while adding elements in HashSet the internal process used is HashMap.

Every constructor of HashSet uses HashMap internally in it.

public HashSet()
{
        map = new HashMap<>();          //Creating internally backing HashMap object
}

-Whenever you insert an element into HashSet using add() method, it actually creates an entry in the internally backing HashMap object with element you have specified as it’s key and constant called “PRESENT” as it’s value. This “PRESENT” is defined in the HashSet class as below.

-	
// Dummy value to associate with an Object in the backing Map
private static final Object PRESENT = new Object();

public boolean add(E e)
{
        return map.put(e, PRESENT)==null;
}

You can notice that, add() method of HashSet class internally calls put() method of backing HashMap object by passing the element you have specified as a key and constant “PRESENT” as it’s value.

-HashSet checks while we are inserting same element. If the element is already inserted in the HashSet then it ignores that element.

-HashSet also implements Serializable and Cloneable interfaces.

Differences between HashSet and ArrayList
1)ArrayList internally uses Array, whereas HashSet uses HashMap internally.
2)ArrayList is of List Interface, whereas HashSet is of Set Interface.
3)ArrayList has get() to get the element index, whereas HashSet doesn't have any get().
4)ArrayList allows null values, whereas HashSet allow one null values.
5)ArrayList follows insertion order, Hashset doesn't follow any insertion order.
6)Arraylist allow duplicate values in it. Whereas, Hashset doesn't duplicate values in it.

Example1:
  package SetPractice;

import java.util.HashSet;
import java.util.Set;

public class HashSetExample1 {
  public static void main(String[] args) {
	  Set<Integer> number = new HashSet<>();
	  number.add(1);
	  number.add(2);
	  number.add(3);
	  Set<Integer> number2 = new HashSet<>();
	  number2.addAll(number);
	  System.out.println(number2);
  }
}

Output:
 [1, 2, 3]

Example2:
 package SetPractice;

import java.util.Arrays;
import java.util.HashSet;

public class HashSetExample2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] number = {1,2,3,4,5};
		HashSet<Integer> num1 = new HashSet<>();
        for(int s:number) {
        	num1.add(s);
        }
        System.out.println(num1);
        
        String[] namelist = {"uttej","bhavana","goutham","gowrav","sujith"};
        HashSet<String> names = new HashSet<>(Arrays.asList(namelist));
        System.out.println(names);
	}
}

Output:

[1, 2, 3, 4, 5]
[bhavana, sujith, uttej, goutham, gowrav]

Example3:

package SetPractice;

import java.util.HashSet;
import java.util.Set;

public class HashSetExample3 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		HashSet<Integer> list1 = new HashSet<Integer>();
		list1.add(1);
		list1.add(5);
		list1.add(7);
		list1.add(9);
		list1.add(11);
		list1.add(15);
		
		HashSet<Integer> list2 = new HashSet<>();
		list2.add(3);
		list2.add(5);
		list2.add(7);
		list2.add(9);
		list2.add(19);
		list2.add(17);
		
//		list2.retainAll(list1);
//		System.out.println(list2);
		
//		list2.addAll(list1);
//		System.out.println(list2);
		
		list2.removeAll(list1);
		System.out.println(list2);
		
	}

}

Output:
[17, 3, 19]-difference
[5, 7, 9]-intersection
[17, 1, 3, 19, 5, 7, 9, 11, 15]-union

Example4:

package SetPractice;

import java.util.HashSet;
import java.util.Iterator;

class Student{
	String name;
	int rollNo;
	String department;
	
	public Student(String name, int rollNo, String department) {
		this.rollNo=rollNo;
		this.name=name;
		this.department=department;
	}
	
	@Override
	public int hashCode() {
		return rollNo;
	}
	
	@Override
	public boolean equals(Object obj){
		Student student = (Student) obj;
		return(rollNo==student.rollNo);
	}
	
	@Override
	public String toString() {
		return rollNo+", "+name+", "+department;
	}
}
public class HashSetExample4 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		 HashSet<Student> set = new HashSet<Student>();
		 
	        //Adding elements to HashSet
	 
	        set.add(new Student("Uttej", 510, "CSE"));
	 
	        set.add(new Student("Bhavana", 514, "CSE"));
	 
	        set.add(new Student("Goutham", 546, "CSE"));
	 
	        set.add(new Student("Sujith", 518, "CSE"));
	 
	        set.add(new Student("Gowrav", 550, "CSE"));
	 
	        set.add(new Student("Bharat", 301, "IT"));
	 
	        set.add(new Student("Amit", 301, "IT"));           //duplicate element
	 
	        set.add(new Student("Bhavya", 872, "ECE"));
	 
	        set.add(new Student("Naman", 301, "CS"));        //duplicate element
	 
	        set.add(new Student("Samson", 565, "Civil"));
	 
	        //Iterating through HashSet
	 
	        Iterator<Student> it = set.iterator();
	 
	        while (it.hasNext())
	        {
	            Student student = (Student) it.next();
	 
	            System.out.println(student);
	        }
	}

}

Output:

514, Bhavana, CSE
546, Goutham, CSE
565, Samson, Civil
518, Sujith, CSE
550, Gowrav, CSE
872, Bhavya, ECE
301, Bharat, IT
510, Uttej, CSE


TreeSet
-It implements the NavigableSet interface. TreeSet is used for storage. The objects class are stored in ascending order.
-Contains unique elements only like HashSet.
-Doesn't allow null values.
-Treeset class can access and retrieval times are quiet fast.
-It is non-synchronized.
-The TreeSet can only allow those generic types that are comparable.
-There is no preserve order in TreeSet.
-TreeSet is normally used for storing huge amounts of information that is naturally sorted. This aids in easy and faster access.
-Treeset internally used TreeMap.

public TreeSet() {
 this(new TreeMap<E,Object>());
 }
-In the above constructor it is shown that the Treeset constructor internally uses TreeMap for adding elements in it which are stored in Key pair.
-String,StringBuffer class and all the Wrapper classes already implements Comparable interface. But if we are creating TreeSet of user defined classes or any Java classes which does not implements comparable interface we will get ClassCastException. to solve this problem we can either implement Comparable to our user defined class or we can pass Comparator object in Constructor while creating the set.
-TreeSet is basically an implementation of a self-balancing binary search tree like a Red-Black Tree.

Constructors
1)Treeset()-used to construct an empty tree set that will be sorted in ascending order.
2)TreeSet(Collection<?extends E> c)-used to build a new treeset that contains the elements of the collection.
3)TreeSet(Comparator<?super E> comparator)-used to construct an empty tree set that will be sorted according to given comparator.
4)TreeSet(SortedSet<E> s)-used to build a TreeSet that contains the elements of the given SortedSet.

Example:
 package SetPractice;

import java.util.*;
import java.util.TreeSet;
import java.util.ArrayList;
import java.util.Arrays;

public class TreeSetExample1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ArrayList<Integer> num = new ArrayList<>();
		num.add(2);
		num.add(3);
		num.add(4);
		Set<Integer> numbers = new TreeSet<>();
		numbers.add(1);
		numbers.addAll(num);
		System.out.println(numbers);
		
	}

}

Output:
[1, 2, 3, 4]

Advantages of Treeset:
1)Sorted based on red/black tree algorith, provides O(log(N)) complexity for operations.
2)Value must either be Comparable or you need to Comparator in the constructor.

Hashset vs Treeset
1)HashSet performance is quiet good when compared to TreeSet.
2)Hashset offers constant time cost while TreeSet offers log(n)
3)Treeset orders all elements by ascending order while hashset doesn't contain any preserved order.
4)One null object is allowed in HashSet, zero null objects are allowed in TreeSet.
5)It uses hashcode() or equals() to compare in HashSet whereas in TreeSet it uses compare() or compareTo() method for comparing
6)HashSet internally uses HashMap and backed up by hashtable whereas TreeSet uses TreeMap and backed up by Red-black Tree.
7)HashSet allows only heterogenous, whereas TreeSet allows homogenous.

-For sorting we can use TreeSet or else use HashSet.

