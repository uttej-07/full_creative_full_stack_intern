                           Arrays
-Array is a non-primitive datatype used to store data contiguous of similar data type.

-Arrays are objects. By which length can be finded.Arrays in Java are dynamically allocated.

-[]-subscript operator is used to mention that we are declaring an array.

-We can get the element of the array by inputing the array position.

-There are various array methods and operations which can be applied on arrays.

-Array data is stored in heap memory. We can also store in stack using push operation.

Arrays are used to multiple values of similar datatype in single variable which helps reduces memory.

Arrays are used in our real time like
1)Contact list
2)Grocery list
3)Booking portals
4)Recent opened application list

Types of Arrays:
1)Single Dimension Array
2)Multi Dimension Array
3)3 Dimension Array

Advantages:
1)Storing of data in one location
2)Using Array methods we can access, compare arrays
3)Easier to locate an element using index position.

ArrayList can be alternative for Array. Because re-sizeable is possible in ArrayList.

-Array can hold primitives or objects.

Syntax:

//Syntax to declare an array
1)datatype[] variable-name;
2)datatype []variable-name;
3)datatype variable-name[];


//Instantiation of Array 
datatype[] variable-name = new datatype[size of an array].

Example:
 Example1:

package Array_practice;

import java.util.Arrays;
import java.util.Scanner;

public class ArrayDeclarationandInitilisatio {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//Declaration of Array
		int[] a= {1,2,3,4,5,6,7,8,9,0};;
		int b[];
			
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the size of the array");
		int size = sc.nextInt();
		
		b = new int[size];
		
		for(int i=0;i<size;i++) {
			b[i]=sc.nextInt();
		}
		
		System.out.println("Array elements of a");
		for(int i=0;i<a.length;i++) {
			System.out.println(a[i]);
		}
		
		System.out.println(Arrays.equals(a, b));
		
	}

}

Output:

Enter the size of the array
10
1
2
3
4
5
6
7
8
9
0
Array elements of a
1
2
3
4
5
6
7
8
9
0
true

Example2:

package Array_practice;

import java.util.Arrays;

public class ArrayMethods {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] a = {1,2,3,4,5,6};
		
		int[] b = {1,2,3,4,5,6};
		
		System.out.println(Arrays.compare(a,b));
		
		int[] c = {4,6,2,8,1,9};
		
		//Arrays.compare()-It is used to compare the arrays and return whether they are same or not.
		System.out.println(Arrays.compare(a, c));
		
		//Arrays.sort-Sorts the array in ascending order
		Arrays.sort(c);
		
		//toString()-	It returns a string representation of the contents of this array.
		System.out.println("Intger array: "+Arrays.toString(c));
		
		int[] k = {96,27,70,274,57,28};
		
		Arrays.sort(k);
		
		int key = 28;
		
		System.out.println(key + "found at index = "+Arrays.binarySearch(k, key));
	}

}

Output:

0
-1
Intger array: [1, 2, 4, 6, 8, 9]
28found at index = 1



