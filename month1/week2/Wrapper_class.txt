                             Wrapper class
What is Wrapper class?
-Wrapper class in Java is used to wrap the primtive data-types to objects or convert primitive data types to objects.

There are 8 primitive data types in Java which can be converted to objects using Wrapper class.

There are various reasons for introducing wrapper class.
->One of the important reason is for Collection -Framework.
Collection Framework take objects as input. Datatypes can't be taken as input.
Reason:
1)collections requires objects for manipulation and primitives are not derived from object

2)Java primitive data types are not reference type.

->Serialization
Converting objects into streams. Primitive data types can't be converted into streams.
Serialization mainly deals with Objects.

Serialization in Java is the concept of representing an object's state as a byte stream


->Synchronization in Multithreading


->Classes in java.util package
All the classes in java.util package operates on objects.

We can wrap and un-wrap the primitive data types.

1)Auto boxing
In auto boxing we will be converting the primitive data types to objects.

2)Unboxing
In Unboxing we will be converting the objects into primitive data types.

Why was Wrapper class introduced?
-They help java be completely object-oriented.

Disadvantage of wrapper class:
They are not suited for use in callback frameworks.

Are wrappers immutable?
All primitive wrapper classes (Integer, Byte, Long, Float, Double, Character, Boolean and Short) are immutable in Java.


Primitive Data Type	        Wrapper Class
byte	                                Byte
short	                                Short
int	                                      Integer
long 	                                Long
float	                               Float
double	                              Double
boolean	                              Boolean
char	                              Character

-Java is a Statically typed language where each variable and expression type is already know at compile-time, thus you cannot define a new operation for such primitive types.

Custom Wrapper Class
-Wrapper class uses to convert the primitive datatypes to objects which is automatic. Even manually we can wrap it which is custom wrapper class.
-Custom Wrapper class is used to wrap primitive datatype.


Example:
 Example1:

package wrapper_class_practice;

public class WrapperClass1 {

	public static void main(String[] args) {
		int n =10;
		
		//One way of Auto Boxing. But, this process is deprecated 
		Integer k = new Integer(5);
		
		//2nd way of Auto Boxing
		Integer i = n;
		
		System.out.println(n==k);
		
		System.out.println(n+" "+k+" "+i);
		
		//Un-boxing
		int j = i.intValue();
		
        System.out.println(j);	
        
        String str = "15";
        
        //System.out.println(str*3);
        
        int l = Integer.parseInt(str);
        
        System.out.println(l*2);
	}
}

Output:

false
10 5 10
10
30

Example2:
//Custom Wrapper class.

Custom_Wrapper.java

package wrapper_class_practice;

public class Custom_Wrapper {

	private char charValue;
	
	public Custom_Wrapper(char charValue) {
		this.charValue = charValue;
	}
	
	public char getCharValue() {
		return charValue;
	}
	
	public void setCharValue(char charValue) {
		this.charValue = charValue;
	}
	
	public String toString() {
		return Character.toString(charValue);
	}
}

TestWrapperClass.java

package wrapper_class_practice;

public class TestWrapperClass {

	public static void main(String[] args) {
		char charval = 'U';
		
		Custom_Wrapper cobj = new Custom_Wrapper(charval);
		
		System.out.println("Boxing Value -"+cobj);
		
		char cvar = cobj.getCharValue();
		System.out.println("Unboxing Value-"+cvar);
	}
}

Output:

Boxing Value -U
Unboxing Value-U

