                  Inheritance
What is Inheritance?
In general, Inheritance refers to the process of transmission of genes from parent to child.

-The same meaning is also been used in OOPs.

In OOPS,
Inheritance is defined as " concept that acquires the properties from one class to another  class".

-The main advantage of Inheritance is Code reusabilty. We would be inheriting the properties from parent class to child class. Child class can use the properties of parent class.

-Inheritance represents IS-A relationship

Why to use Inheritance?
-Code reusability.
-Method Overriding.

Syntax:
class Parent{
   //Body of Parent
    }
class Child extends Parent{
   //Body of child
  }

-We need to use "extends" keyword to inherit parent class properties to child class.
The meaning of "extends" is to increase the functionality

-Even we can inherit abstraction in it. But, we can't create objects for abstract class.
-If we use abstraction and inheritance then we can modify the functionalities.

Alternatives for Inheritance is:
Delegation
Delegation-Delegation means that you use an object of another class as an instance variable, and forward messages to the instance.

-In inheritance we can't inherit Constructors. Because Constructors aren't members.
-We will be getting errors if we try to inherit the constructor.

Why abstract class is needed in inheritance?
-The abstract class and inheritance collectively ensures that most of the code are written using abstract and higher level classes, so that it can leverage Inheritance and Polymorphism to support future changes.

Is inheritance important?
-If we don't want inheritance then it is quite difficult. We need to mention all the functionalities in different which increases memory.
-If we need to , then we need to use the concepts like prototyping and delegation which is quite similar to inheritance.

Real time examples of Inheritance?
-Humans, Auto mobile, Gadgets.

Types of Inheritance:
There are 
1)Single Inheritance
2)Multiple Inheritance
3)Multi-level Inheritance
4)Hierarchical Inheritance
5)Hybrid Inheritance

-In the given types Multiple inheritance is not possible because it forms ambiguity. We can think like have 2 classes A,B and have 2 different methods in it and try to inherit by 3rd Class then also we get error
-If we want to try hybrid inheritance then we shouldn't use multiple inheritance in it.

1)Single Inheritance
-Child class inherits the properties of Parent class.
There will only one parent and one child class in Single Inheritance.

2)Multiple Inheritance
-Child class inherits the properties of 2 Parents classes.
-There will be only one child class and more than one parent class.
-We get compile time errors.

Example:
example1:

class A{  
void msg(){System.out.println("Hello");}  
}  
class B{  
void disp(){System.out.println("Welcome");}  
}  
class MultipleInheritance1 extends A,B{//suppose if it were  
   
 public static void main(String args[]){  
   C obj=new C();  
   obj.msg();//Now which msg() method would be invoked?  
}  
}  

Output:

PS E:\full_creative_internship\month1\week2\Inheritance> javac MultipleInheritance1.java
MultipleInheritance1.java:7: error: '{' expected
class MultipleInheritance1 extends A,B{//suppose if it were
                                    ^
1 error

3)Multi-level Inheritance
-In Multi-level inheritance there will be chain of inheritance.

Example2:
class Parent{
   public void display(){
     System.out.println("Parent class");
        }
     }

class Child1 extends Parent{
   public void display1(){
      System.out.println("Child1 class");
          }
       }

class Child2 extends Child1{
    public void display2(){
      System.out.println("Child2 class");
        }
     }
class MultilevelInheritance1{
  public static void main(String[] args){
    Child2 c = new Child2();
     c.display();
     c.display1();
     c.display2();
     }
  }

Output:
PS E:\full_creative_internship\month1\week2\Inheritance> javac MultilevelInheritance1.java
PS E:\full_creative_internship\month1\week2\Inheritance> java MultilevelInheritance1
Parent class
Child1 class
Child2 class

4)Hierarchical Inheritance
-In hierarchical inheritance more than one child inherits the parent class.

Example3:
 
class Animal{  
void eat(){System.out.println("eating...");}  
}  
class Dog extends Animal{  
void bark(){System.out.println("barking...");}  
}  
class Cat extends Animal{  
void meow(){System.out.println("meowing...");}  
}  
class TestInheritance3{  
public static void main(String args[]){  
Cat c=new Cat();  
c.meow();  
c.eat();  
}
}

Output:

meowing...
eating...

Aggregation:

-It is a relationship between 2 classes that is best described as a "has-a" and "whole/part" relationship.

-The aggregate classs contains a reference to another class and is said to have ownership of that class.

-Even aggregation main use is to code-reusability.

The main difference between inheritance and abstraction is that inheritance only inherits the properties. But, when it comes to aggregation it contains object inside object.
